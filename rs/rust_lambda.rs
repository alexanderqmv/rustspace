
fn main() {
    let v = vec![1,2,3,4,5];
    let multiplier = 10;
    let multiply = |x: i32| -> i32 {
        x * multiplier
    };

    let multiplied_v: Vec<i32> = v.into_iter().map(multiply).collect();
    println!("{:?}", multiplied_v);

}
      
/* Здесь мы определяем замыкание multiply, которое захватывает переменную multiplier. Затем мы используем into_iter() для превращения
исходного вектора v в итератор, и затем используем метод map() для применения замыкания multiply к каждому элементу вектора. Результатом является новый вектор, содержащий умноженные значения.

Замыкания в Rust очень мощные и могут использоваться для создания абстракций высшего уровня и более чистого, функционального кода. */
